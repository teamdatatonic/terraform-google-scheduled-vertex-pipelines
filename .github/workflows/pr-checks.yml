name: PR checks

on:
  pull_request:
    branches:
      - main

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: hashicorp/setup-terraform@v2

      - name: Check out repository
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - uses: actions/cache@v2
        name: Cache plugin dir
        with:
          path: ~/.tflint.d/plugins
          key: tflint-${{ hashFiles('.tflint.hcl') }}

      - uses: terraform-linters/setup-tflint@v2.0.0
        name: Setup TFLint

      - uses: pre-commit/action@v3.0.0
        name: Pre-commit checks

  terratest:
    runs-on: ubuntu-latest
    steps:
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Check out repository
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Set up Go 1.18
        uses: actions/setup-go@v1
        with:
          go-version: 1.18

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v0'

      - name: Copy pipeline.json to GCS
        run: "gsutil cp test/pipeline.json gs://${{ secrets.TEST_BUCKET }}/terraform-google-scheduled-vertex-pipelines/${{ github.run_id }}/pipeline.json"

      - name: Copy pipeline.yaml to AR
        run: |
          curl -X POST
          -H "Authorization: Bearer $(gcloud auth print-access-token)"
          -F tags=latest
          -F content=@test/pipeline.yaml
          "https://europe-west2-kfp.pkg.dev/${{ secrets.TEST_PROJECT_ID }}/${{ secrets.TEST_AR_REPO }}"

      - name: Run Terratest
        run: make test
        env:
          TF_VAR_project: ${{ secrets.TEST_PROJECT_ID }}
          TF_VAR_gcs_bucket: ${{ secrets.TEST_BUCKET }}
          TF_VAR_object_name: "terraform-google-scheduled-vertex-pipelines/${{ github.run_id }}/pipeline.json"
          TF_VAR_ar_repository: ${{ secrets.TEST_AR_REPO }}

      - name: Delete pipeline.json from GCS after test
        if: always()
        run: "gsutil rm gs://${{ secrets.TEST_BUCKET }}/terraform-google-scheduled-vertex-pipelines/${{ github.run_id }}/pipeline.json"

  generate-readme:
    runs-on: ubuntu-latest
    steps:

      - name: Check out repository
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Render terraform docs and push changes back to PR
        uses: terraform-docs/gh-actions@main
        with:
          working-dir: .
          output-file: README.md
          output-method: replace
          template: |-
            # Scheduled Vertex Pipelines

            This repo contains a Terraform module for scheduling a Vertex Pipeline using Google Cloud Scheduler, without the need for a Cloud Function or other "glue code".

            This module is available in the [Datatonic Terraform Registry](https://registry.terraform.io/namespaces/teamdatatonic).

            ## Examples

            Check out the the [examples directory](./examples).
            
            ## Limitations

            ### Pipeline job names

            Vertex Pipeline jobs created using the [Python SDK](https://github.com/googleapis/python-aiplatform) follow the format `<pipeline name>-<timestamp>`. This is implemented in the SDK itself (not by the API).
            Pipeline jobs created using this Terraform module instead just have the numeric ID as the job name. This is for two reasons:

            - The ability to specify the job name is only available in the gRPC API, not the HTTP API (Cloud Scheduler jobs can only target the HTTP API, not the gRPC API)
            - Regardless, Cloud Scheduler jobs cannot dynamically alter the HTTP payload based on a timestamp

            ### Caching

            Using the SDK, you can override the caching behaviour for Vertex Pipeline steps. This feature is not available in the HTTP API used by this module.
            Instead, you can specify the caching behaviour in your actual pipeline definition.

            ## Development

            ### Local setup

            - Install [pre-commit](https://pre-commit.com/)
            - Install the pre-commit hooks - `pre-commit install`

            ### README

            The README file is autogenerated using [`terraform-docs`](https://github.com/terraform-docs/terraform-docs). This is done when you create a pull request (or push to an existing PR).

            You can customise the template (including this text for example) in `.github/workflows/pr-checks.yml`.

            {{ .Content }}
            
          git-push: "true"
